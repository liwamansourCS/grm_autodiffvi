
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace multilevel_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 57> locations_array__ = 
{" (found before start of program)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 19, column 4 to column 20)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 20, column 4 to column 20)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 21, column 4 to column 24)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 22, column 4 to column 22)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 23, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 24, column 4 to column 19)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 25, column 4 to column 26)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 26, column 4 to column 26)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 27, column 4 to column 26)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 28, column 4 to column 26)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 29, column 4 to column 26)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 32, column 4 to column 20)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 34, column 8 to line 43, column 32)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 33, column 4 to line 43, column 32)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 46, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 47, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 48, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 49, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 50, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 51, column 4 to column 25)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 52, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 53, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 54, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 55, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 56, column 4 to column 28)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 57, column 4 to column 31)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 2, column 4 to column 19)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 3, column 4 to column 23)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 4, column 4 to column 27)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 5, column 4 to column 23)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 6, column 4 to column 31)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 7, column 4 to column 25)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 8, column 34 to column 35)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 8, column 4 to column 37)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 9, column 42 to column 43)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 9, column 4 to column 45)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 10, column 29 to column 30)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 10, column 4 to column 38)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 11, column 34 to column 35)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 11, column 4 to column 37)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 12, column 29 to column 30)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 12, column 4 to column 39)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 13, column 50 to column 51)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 13, column 4 to column 53)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 14, column 38 to column 39)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 14, column 4 to column 41)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 15, column 11 to column 12)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 15, column 4 to column 26)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 16, column 28 to column 29)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 16, column 4 to column 31)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 19, column 11 to column 16)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 20, column 11 to column 16)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 21, column 11 to column 20)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 22, column 11 to column 18)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 23, column 11 to column 24)",
 " (in '/mnt/d/GRM/advi-grm/stan_version/multilevel.stan', line 32, column 11 to column 12)"};




class multilevel_model final : public model_base_crtp<multilevel_model> {

 private:
  int N;
  int n_age;
  int n_age_edu;
  int n_edu;
  int n_region_full;
  int n_state;
  std::vector<int> age;
  std::vector<int> age_edu;
  Eigen::Matrix<double, -1, 1> black_data__;
  std::vector<int> edu;
  Eigen::Matrix<double, -1, 1> female_data__;
  std::vector<int> region_full;
  std::vector<int> state;
  Eigen::Matrix<double, -1, 1> v_prev_full_data__;
  std::vector<int> y; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> black{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> female{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> v_prev_full{nullptr, 0};
 
 public:
  ~multilevel_model() { }
  
  inline std::string model_name() const final { return "multilevel_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  multilevel_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "multilevel_model_namespace::multilevel_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 27;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 28;
      context__.validate_dims("data initialization","n_age","int",
           std::vector<size_t>{});
      n_age = std::numeric_limits<int>::min();
      
      
      current_statement__ = 28;
      n_age = context__.vals_i("n_age")[(1 - 1)];
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "n_age", n_age, 0);
      current_statement__ = 29;
      context__.validate_dims("data initialization","n_age_edu","int",
           std::vector<size_t>{});
      n_age_edu = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      n_age_edu = context__.vals_i("n_age_edu")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "n_age_edu", n_age_edu,
                                            0);
      current_statement__ = 30;
      context__.validate_dims("data initialization","n_edu","int",
           std::vector<size_t>{});
      n_edu = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      n_edu = context__.vals_i("n_edu")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "n_edu", n_edu, 0);
      current_statement__ = 31;
      context__.validate_dims("data initialization","n_region_full","int",
           std::vector<size_t>{});
      n_region_full = std::numeric_limits<int>::min();
      
      
      current_statement__ = 31;
      n_region_full = context__.vals_i("n_region_full")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "n_region_full",
                                            n_region_full, 0);
      current_statement__ = 32;
      context__.validate_dims("data initialization","n_state","int",
           std::vector<size_t>{});
      n_state = std::numeric_limits<int>::min();
      
      
      current_statement__ = 32;
      n_state = context__.vals_i("n_state")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "n_state", n_state, 0);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("age", "N", N);
      current_statement__ = 34;
      context__.validate_dims("data initialization","age","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      age = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 34;
      age = context__.vals_i("age");
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "age", age, 0);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "age", age, n_age);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("age_edu", "N", N);
      current_statement__ = 36;
      context__.validate_dims("data initialization","age_edu","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      age_edu = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 36;
      age_edu = context__.vals_i("age_edu");
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "age_edu", age_edu, 0);
      current_statement__ = 36;
      stan::math::check_less_or_equal(function__, "age_edu", age_edu,
                                         n_age_edu);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("black", "N", N);
      current_statement__ = 38;
      context__.validate_dims("data initialization","black","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      black_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&black) Eigen::Map<Eigen::Matrix<double, -1, 1>>(black_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> black_flat__;
        current_statement__ = 38;
        black_flat__ = context__.vals_r("black");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 38;
          stan::model::assign(black, black_flat__[(pos__ - 1)],
            "assigning variable black", stan::model::index_uni(sym1__));
          current_statement__ = 38;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 38;
      stan::math::check_greater_or_equal(function__, "black", black, 0);
      current_statement__ = 38;
      stan::math::check_less_or_equal(function__, "black", black, 1);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("edu", "N", N);
      current_statement__ = 40;
      context__.validate_dims("data initialization","edu","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      edu = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 40;
      edu = context__.vals_i("edu");
      current_statement__ = 40;
      stan::math::check_greater_or_equal(function__, "edu", edu, 0);
      current_statement__ = 40;
      stan::math::check_less_or_equal(function__, "edu", edu, n_edu);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("female", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","female","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      female_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&female) Eigen::Map<Eigen::Matrix<double, -1, 1>>(female_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> female_flat__;
        current_statement__ = 42;
        female_flat__ = context__.vals_r("female");
        current_statement__ = 42;
        pos__ = 1;
        current_statement__ = 42;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 42;
          stan::model::assign(female, female_flat__[(pos__ - 1)],
            "assigning variable female", stan::model::index_uni(sym1__));
          current_statement__ = 42;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "female", female, 0);
      current_statement__ = 42;
      stan::math::check_less_or_equal(function__, "female", female, 1);
      current_statement__ = 43;
      stan::math::validate_non_negative_index("region_full", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","region_full","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      region_full = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 44;
      region_full = context__.vals_i("region_full");
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "region_full",
                                            region_full, 0);
      current_statement__ = 44;
      stan::math::check_less_or_equal(function__, "region_full", region_full,
                                         n_region_full);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("state", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization","state","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      state = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 46;
      state = context__.vals_i("state");
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "state", state, 0);
      current_statement__ = 46;
      stan::math::check_less_or_equal(function__, "state", state, n_state);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("v_prev_full", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","v_prev_full","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      v_prev_full_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&v_prev_full) Eigen::Map<Eigen::Matrix<double, -1, 1>>(v_prev_full_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> v_prev_full_flat__;
        current_statement__ = 48;
        v_prev_full_flat__ = context__.vals_r("v_prev_full");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(v_prev_full, v_prev_full_flat__[(pos__ - 1)],
            "assigning variable v_prev_full", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 50;
      y = context__.vals_i("y");
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 50;
      stan::math::check_less_or_equal(function__, "y", y, 1);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("a", "n_age", n_age);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("b", "n_edu", n_edu);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("c", "n_age_edu", n_age_edu);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("d", "n_state", n_state);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("e", "n_region_full",
                                              n_region_full);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("y_hat", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_age + n_edu + n_age_edu + n_state + n_region_full + 
      5 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multilevel_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> a =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_age, DUMMY_VAR__);
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_age);
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_edu, DUMMY_VAR__);
      current_statement__ = 2;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_edu);
      Eigen::Matrix<local_scalar_t__, -1, 1> c =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_age_edu,
           DUMMY_VAR__);
      current_statement__ = 3;
      c = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_age_edu);
      Eigen::Matrix<local_scalar_t__, -1, 1> d =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_state,
           DUMMY_VAR__);
      current_statement__ = 4;
      d = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_state);
      Eigen::Matrix<local_scalar_t__, -1, 1> e =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_region_full,
           DUMMY_VAR__);
      current_statement__ = 5;
      e = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_region_full);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(5, DUMMY_VAR__);
      current_statement__ = 6;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(5);
      local_scalar_t__ sigma_a = DUMMY_VAR__;
      current_statement__ = 7;
      sigma_a = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ sigma_b = DUMMY_VAR__;
      current_statement__ = 8;
      sigma_b = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ sigma_c = DUMMY_VAR__;
      current_statement__ = 9;
      sigma_c = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ sigma_d = DUMMY_VAR__;
      current_statement__ = 10;
      sigma_d = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ sigma_e = DUMMY_VAR__;
      current_statement__ = 11;
      sigma_e = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_hat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        stan::model::assign(y_hat,
          (((((((((stan::model::rvalue(beta, "beta",
                     stan::model::index_uni(1)) +
                    (stan::model::rvalue(beta, "beta",
                       stan::model::index_uni(2)) *
                      stan::model::rvalue(black, "black",
                        stan::model::index_uni(i)))) +
                   (stan::model::rvalue(beta, "beta",
                      stan::model::index_uni(3)) *
                     stan::model::rvalue(female, "female",
                       stan::model::index_uni(i)))) +
                  ((stan::model::rvalue(beta, "beta",
                      stan::model::index_uni(5)) *
                     stan::model::rvalue(female, "female",
                       stan::model::index_uni(i))) *
                    stan::model::rvalue(black, "black",
                      stan::model::index_uni(i)))) +
                 (stan::model::rvalue(beta, "beta",
                    stan::model::index_uni(4)) *
                   stan::model::rvalue(v_prev_full, "v_prev_full",
                     stan::model::index_uni(i)))) +
                stan::model::rvalue(a, "a",
                  stan::model::index_uni(stan::model::rvalue(age, "age",
                                           stan::model::index_uni(i))))) +
               stan::model::rvalue(b, "b",
                 stan::model::index_uni(stan::model::rvalue(edu, "edu",
                                          stan::model::index_uni(i))))) +
              stan::model::rvalue(c, "c",
                stan::model::index_uni(stan::model::rvalue(age_edu,
                                         "age_edu",
                                         stan::model::index_uni(i))))) +
             stan::model::rvalue(d, "d",
               stan::model::index_uni(stan::model::rvalue(state, "state",
                                        stan::model::index_uni(i))))) +
            stan::model::rvalue(e, "e",
              stan::model::index_uni(stan::model::rvalue(region_full,
                                       "region_full",
                                       stan::model::index_uni(i))))),
          "assigning variable y_hat", stan::model::index_uni(i));
      }
      {
        current_statement__ = 15;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(a, 0, sigma_a));
        current_statement__ = 16;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(b, 0, sigma_b));
        current_statement__ = 17;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c, 0, sigma_c));
        current_statement__ = 18;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(d, 0, sigma_d));
        current_statement__ = 19;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(e, 0, sigma_e));
        current_statement__ = 20;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta, 0, 10));
        current_statement__ = 21;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_a, 0, 10));
        current_statement__ = 22;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_b, 0, 10));
        current_statement__ = 23;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_c, 0, 10));
        current_statement__ = 24;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_d, 0, 10));
        current_statement__ = 25;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_e, 0, 10));
        current_statement__ = 26;
        lp_accum__.add(stan::math::bernoulli_logit_lpmf<propto__>(y, y_hat));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multilevel_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> a =
         Eigen::Matrix<double, -1, 1>::Constant(n_age,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      a = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_age);
      Eigen::Matrix<double, -1, 1> b =
         Eigen::Matrix<double, -1, 1>::Constant(n_edu,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_edu);
      Eigen::Matrix<double, -1, 1> c =
         Eigen::Matrix<double, -1, 1>::Constant(n_age_edu,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      c = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_age_edu);
      Eigen::Matrix<double, -1, 1> d =
         Eigen::Matrix<double, -1, 1>::Constant(n_state,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      d = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_state);
      Eigen::Matrix<double, -1, 1> e =
         Eigen::Matrix<double, -1, 1>::Constant(n_region_full,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      e = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
            n_region_full);
      Eigen::Matrix<double, -1, 1> beta =
         Eigen::Matrix<double, -1, 1>::Constant(5,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(5);
      double sigma_a = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sigma_a = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double sigma_b = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sigma_b = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double sigma_c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sigma_c = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double sigma_d = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sigma_d = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double sigma_e = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 11;
      sigma_e = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      Eigen::Matrix<double, -1, 1> y_hat =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(a);
      out__.write(b);
      out__.write(c);
      out__.write(d);
      out__.write(e);
      out__.write(beta);
      out__.write(sigma_a);
      out__.write(sigma_b);
      out__.write(sigma_c);
      out__.write(sigma_d);
      out__.write(sigma_e);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 13;
        stan::model::assign(y_hat,
          (((((((((stan::model::rvalue(beta, "beta",
                     stan::model::index_uni(1)) +
                    (stan::model::rvalue(beta, "beta",
                       stan::model::index_uni(2)) *
                      stan::model::rvalue(black, "black",
                        stan::model::index_uni(i)))) +
                   (stan::model::rvalue(beta, "beta",
                      stan::model::index_uni(3)) *
                     stan::model::rvalue(female, "female",
                       stan::model::index_uni(i)))) +
                  ((stan::model::rvalue(beta, "beta",
                      stan::model::index_uni(5)) *
                     stan::model::rvalue(female, "female",
                       stan::model::index_uni(i))) *
                    stan::model::rvalue(black, "black",
                      stan::model::index_uni(i)))) +
                 (stan::model::rvalue(beta, "beta",
                    stan::model::index_uni(4)) *
                   stan::model::rvalue(v_prev_full, "v_prev_full",
                     stan::model::index_uni(i)))) +
                stan::model::rvalue(a, "a",
                  stan::model::index_uni(stan::model::rvalue(age, "age",
                                           stan::model::index_uni(i))))) +
               stan::model::rvalue(b, "b",
                 stan::model::index_uni(stan::model::rvalue(edu, "edu",
                                          stan::model::index_uni(i))))) +
              stan::model::rvalue(c, "c",
                stan::model::index_uni(stan::model::rvalue(age_edu,
                                         "age_edu",
                                         stan::model::index_uni(i))))) +
             stan::model::rvalue(d, "d",
               stan::model::index_uni(stan::model::rvalue(state, "state",
                                        stan::model::index_uni(i))))) +
            stan::model::rvalue(e, "e",
              stan::model::index_uni(stan::model::rvalue(region_full,
                                       "region_full",
                                       stan::model::index_uni(i))))),
          "assigning variable y_hat", stan::model::index_uni(i));
      }
      if (emit_transformed_parameters__) {
        out__.write(y_hat);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> a =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_age, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
        stan::model::assign(a, in__.read<local_scalar_t__>(),
          "assigning variable a", stan::model::index_uni(sym1__));
      }
      out__.write(a);
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_edu, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
        stan::model::assign(b, in__.read<local_scalar_t__>(),
          "assigning variable b", stan::model::index_uni(sym1__));
      }
      out__.write(b);
      Eigen::Matrix<local_scalar_t__, -1, 1> c =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_age_edu,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
        stan::model::assign(c, in__.read<local_scalar_t__>(),
          "assigning variable c", stan::model::index_uni(sym1__));
      }
      out__.write(c);
      Eigen::Matrix<local_scalar_t__, -1, 1> d =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_state,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
        stan::model::assign(d, in__.read<local_scalar_t__>(),
          "assigning variable d", stan::model::index_uni(sym1__));
      }
      out__.write(d);
      Eigen::Matrix<local_scalar_t__, -1, 1> e =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(n_region_full,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
        stan::model::assign(e, in__.read<local_scalar_t__>(),
          "assigning variable e", stan::model::index_uni(sym1__));
      }
      out__.write(e);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(5, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
        stan::model::assign(beta, in__.read<local_scalar_t__>(),
          "assigning variable beta", stan::model::index_uni(sym1__));
      }
      out__.write(beta);
      local_scalar_t__ sigma_a = DUMMY_VAR__;
      sigma_a = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_a);
      local_scalar_t__ sigma_b = DUMMY_VAR__;
      sigma_b = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_b);
      local_scalar_t__ sigma_c = DUMMY_VAR__;
      sigma_c = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_c);
      local_scalar_t__ sigma_d = DUMMY_VAR__;
      sigma_d = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_d);
      local_scalar_t__ sigma_e = DUMMY_VAR__;
      sigma_e = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_e);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"a", "b", "c", "d", "e", "beta",
      "sigma_a", "sigma_b", "sigma_c", "sigma_d", "sigma_e", "y_hat"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(n_age)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(n_edu)},
      std::vector<size_t>{static_cast<size_t>(n_age_edu)},
      std::vector<size_t>{static_cast<size_t>(n_state)},
      std::vector<size_t>{static_cast<size_t>(n_region_full)},
      std::vector<size_t>{static_cast<size_t>(5)}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "e" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_a");
    param_names__.emplace_back(std::string() + "sigma_b");
    param_names__.emplace_back(std::string() + "sigma_c");
    param_names__.emplace_back(std::string() + "sigma_d");
    param_names__.emplace_back(std::string() + "sigma_e");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_age; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "a" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_age_edu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "c" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_state; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "d" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= n_region_full; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "e" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 5; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma_a");
    param_names__.emplace_back(std::string() + "sigma_b");
    param_names__.emplace_back(std::string() + "sigma_c");
    param_names__.emplace_back(std::string() + "sigma_d");
    param_names__.emplace_back(std::string() + "sigma_e");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_hat" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age_edu) + "},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_state) + "},\"block\":\"parameters\"},{\"name\":\"e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_region_full) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"sigma_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"a\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age) + "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_edu) + "},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_age_edu) + "},\"block\":\"parameters\"},{\"name\":\"d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_state) + "},\"block\":\"parameters\"},{\"name\":\"e\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_region_full) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(5) + "},\"block\":\"parameters\"},{\"name\":\"sigma_a\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_d\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_e\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((n_age + n_edu) + n_age_edu) + n_state) + n_region_full) + 5) + 1)
       + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * N;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((n_age + n_edu) + n_age_edu) + n_state) + n_region_full) + 5) + 1)
       + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * N;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 11> names__{"a", "b", "c", "d", "e",
      "beta", "sigma_a", "sigma_b", "sigma_c", "sigma_d", "sigma_e"};
      const std::array<Eigen::Index, 11> constrain_param_sizes__{n_age, 
       n_edu, n_age_edu, n_state, n_region_full, 5, 1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = multilevel_model_namespace::multilevel_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return multilevel_model_namespace::profiles__;
}

#endif


